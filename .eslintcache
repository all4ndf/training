[{"D:\\ReactTraining\\training1\\src\\index.js":"1","D:\\ReactTraining\\training1\\src\\App.js":"2","D:\\ReactTraining\\training1\\src\\reportWebVitals.js":"3","D:\\ReactTraining\\training1\\src\\Test.jsx":"4","D:\\ReactTraining\\training1\\src\\components\\Form1.jsx":"5","D:\\ReactTraining\\training1\\src\\components\\Form2.jsx":"6","D:\\ReactTraining\\training1\\src\\components\\Routes.jsx":"7","D:\\ReactTraining\\training1\\src\\components\\Home.jsx":"8","D:\\ReactTraining\\training1\\src\\components\\Form3.jsx":"9","D:\\ReactTraining\\training1\\src\\components\\FormAntDesign.jsx":"10","D:\\ReactTraining\\training1\\src\\components\\SampleForm1.jsx":"11","D:\\ReactTraining\\training1\\src\\components\\ItemProfile.jsx":"12","D:\\ReactTraining\\training1\\src\\components\\ChargeForm.jsx":"13","D:\\ReactTraining\\training1\\src\\components\\GeneralJournal.jsx":"14","E:\\My Projects\\traning\\training1\\src\\index.js":"15","E:\\My Projects\\traning\\training1\\src\\reportWebVitals.js":"16","E:\\My Projects\\traning\\training1\\src\\App.js":"17","E:\\My Projects\\traning\\training1\\src\\components\\Routes.jsx":"18","E:\\My Projects\\traning\\training1\\src\\components\\Form2.jsx":"19","E:\\My Projects\\traning\\training1\\src\\components\\Home.jsx":"20","E:\\My Projects\\traning\\training1\\src\\components\\Form1.jsx":"21","E:\\My Projects\\traning\\training1\\src\\components\\Form3.jsx":"22","E:\\My Projects\\traning\\training1\\src\\components\\SampleForm1.jsx":"23","E:\\My Projects\\traning\\training1\\src\\components\\FormAntDesign.jsx":"24","E:\\My Projects\\traning\\training1\\src\\components\\GeneralJournal.jsx":"25","E:\\My Projects\\traning\\training1\\src\\components\\ChargeForm.jsx":"26","E:\\My Projects\\traning\\training1\\src\\components\\ItemProfile.jsx":"27","E:\\My Projects\\traning\\training1\\src\\components\\FormRedux.jsx":"28","E:\\My Projects\\traning\\training1\\src\\reducers\\index.js":"29","E:\\My Projects\\traning\\training1\\src\\reducers\\count.js":"30","E:\\My Projects\\traning\\training1\\src\\actions\\index.js":"31","E:\\My Projects\\traning\\training1\\src\\reducers\\user.js":"32","E:\\My Projects\\traning\\training1\\src\\components\\UserInformation.jsx":"33","E:\\My Projects\\traning\\training1\\src\\components\\Users.jsx":"34"},{"size":614,"mtime":1610948274759,"results":"35","hashOfConfig":"36"},{"size":1543,"mtime":1611815651197,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"38","hashOfConfig":"36"},{"size":275,"mtime":1610523189960,"results":"39","hashOfConfig":"40"},{"size":3666,"mtime":1610701710523,"results":"41","hashOfConfig":"36"},{"size":1725,"mtime":1610695663218,"results":"42","hashOfConfig":"36"},{"size":1824,"mtime":1611815620791,"results":"43","hashOfConfig":"36"},{"size":162,"mtime":1610604407233,"results":"44","hashOfConfig":"36"},{"size":1949,"mtime":1610945958109,"results":"45","hashOfConfig":"36"},{"size":2885,"mtime":1610950116870,"results":"46","hashOfConfig":"36"},{"size":7011,"mtime":1610959955063,"results":"47","hashOfConfig":"36"},{"size":5824,"mtime":1611209263879,"results":"48","hashOfConfig":"36"},{"size":6934,"mtime":1611823889638,"results":"49","hashOfConfig":"36"},{"size":7753,"mtime":1611827583112,"results":"50","hashOfConfig":"36"},{"size":905,"mtime":1612246165868,"results":"51","hashOfConfig":"52"},{"size":362,"mtime":499162500000,"results":"53","hashOfConfig":"52"},{"size":2119,"mtime":1612333560067,"results":"54","hashOfConfig":"52"},{"size":2407,"mtime":1612333543700,"results":"55","hashOfConfig":"52"},{"size":1725,"mtime":1610695663218,"results":"56","hashOfConfig":"52"},{"size":162,"mtime":1610604407233,"results":"57","hashOfConfig":"52"},{"size":3666,"mtime":1610701710523,"results":"58","hashOfConfig":"52"},{"size":1949,"mtime":1610945958109,"results":"59","hashOfConfig":"52"},{"size":7011,"mtime":1610959955063,"results":"60","hashOfConfig":"52"},{"size":2885,"mtime":1610950116870,"results":"61","hashOfConfig":"52"},{"size":7753,"mtime":1611827583112,"results":"62","hashOfConfig":"52"},{"size":6934,"mtime":1611823889638,"results":"63","hashOfConfig":"52"},{"size":5824,"mtime":1611209263879,"results":"64","hashOfConfig":"52"},{"size":1423,"mtime":1612246061854,"results":"65","hashOfConfig":"52"},{"size":244,"mtime":1612245565468,"results":"66","hashOfConfig":"52"},{"size":245,"mtime":1612242688812,"results":"67","hashOfConfig":"52"},{"size":285,"mtime":1612245314789,"results":"68","hashOfConfig":"52"},{"size":256,"mtime":1612245717632,"results":"69","hashOfConfig":"52"},{"size":3646,"mtime":1612336038210,"results":"70","hashOfConfig":"52"},{"size":368,"mtime":1612333620063,"results":"71","hashOfConfig":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1mxsbu4",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11u6n75",{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"ex3nyv",{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"107"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"107"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"107"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"107"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"107"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"107"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"D:\\ReactTraining\\training1\\src\\index.js",[],["148","149"],"D:\\ReactTraining\\training1\\src\\App.js",[],"D:\\ReactTraining\\training1\\src\\reportWebVitals.js",[],"D:\\ReactTraining\\training1\\src\\Test.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Form1.jsx",["150"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nconst Form1 = (props) => {\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [qty, setQty] = useState(0);\r\n  const [unitPrice, setUnitPrice] = useState(0);\r\n  const [amount, setAmount] = useState(0);\r\n  const [patientInformation, setPatientInformation] = useState({});\r\n  const [patients, setPatients] = useState([]);\r\n  const [patientNo, setPatientNo] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    handleGetPatientInformation();\r\n    console.log(props);\r\n\r\n    setPatientNo(props.location.state.patientNo);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleComputeAmount();\r\n  }, [qty, unitPrice]);\r\n\r\n  const handleComputeAmount = () => {\r\n    let q = isNaN(qty) ? 0 : qty;\r\n    let p = isNaN(unitPrice) ? 0 : unitPrice;\r\n\r\n    setAmount(q * p);\r\n  };\r\n  const handleGetPatientInformation = () => {\r\n    console.log(\"Handle Patient Information\");\r\n    setPatientInformation({\r\n      lastName: \"Fabular\",\r\n      firstName: \"Allan\",\r\n      middleName: \"Delola\",\r\n    });\r\n\r\n    setPatients([\r\n      {\r\n        lastName: \"Fabular\",\r\n        firstName: \"Allan\",\r\n        middleName: \"Delola\",\r\n      },\r\n      {\r\n        lastName: \"Dela Cruz\",\r\n        firstName: \"Joseph\",\r\n        middleName: \"Ocampo\",\r\n      },\r\n      {\r\n        lastName: \"Dela Cruz\",\r\n        firstName: \"Joseph\",\r\n        middleName: \"Ocampo\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleChangeLastname = (e) => {\r\n    console.log(e);\r\n    setLastName(e.target.value);\r\n  };\r\n\r\n  const handleForm2 = () => {\r\n    props.history.push({\r\n      pathname: \"/form2\",\r\n      state: {\r\n        listOfItems: [\r\n          {\r\n            itemCode: \"1\",\r\n            brandName: \"xxxxxxxxxxx\",\r\n          },\r\n          {\r\n            itemCode: \"2\",\r\n            brandName: \"rrrrrrrr\",\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  };\r\n  const handleSubmitForm = (e) => {\r\n    e.preventDefault();\r\n    console.log(e);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <h1>Form 1</h1>\r\n      <button onClick={() => handleForm2()}>Form 2</button>\r\n      <div>\r\n        {firstName} {lastName}\r\n      </div>\r\n      <div>\r\n        {qty} {unitPrice}\r\n      </div>\r\n      <div>{amount}</div>\r\n      <div>{patientInformation.lastName}</div>\r\n\r\n      <div>\r\n        {patients.map((object, index) => {\r\n          return (\r\n            <p key={object.lastName}>\r\n              {object.lastName} - {object.firstName}\r\n            </p>\r\n          );\r\n        })}\r\n      </div>\r\n      <div>{patientNo}</div>\r\n\r\n      <form onSubmit={handleSubmitForm}>\r\n        <div>\r\n          <label>Lastname:</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"lastName\"\r\n            onChange={(e) => handleChangeLastname(e)}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Firstname:</label>\r\n          <input className=\"input\" type=\"text\" name=\"firstName\" />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Qty:</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"number\"\r\n            name=\"qty\"\r\n            onChange={(e) => setQty(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Unit price:</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"number\"\r\n            name=\"unitPrice\"\r\n            onChange={(e) => setUnitPrice(e.target.value)}\r\n          />\r\n        </div>\r\n        <button className=\"btn\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Form1;\r\n","D:\\ReactTraining\\training1\\src\\components\\Form2.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Routes.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Home.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Form3.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\FormAntDesign.jsx",["151"],"import React, { useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Button,\r\n  Space,\r\n  Modal,\r\n  message,\r\n  Input,\r\n  Select,\r\n  Checkbox,\r\n  DatePicker,\r\n} from \"antd\";\r\nconst { Option } = Select;\r\nconst FormAntDesign = () => {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const handleShowModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n    console.log(\"Ok\");\r\n  };\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    console.log(\"Cancel\");\r\n  };\r\n\r\n  const handleDisplayMessage = () => {\r\n    message.warning(\"Warning\");\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    console.log(`selected ${value}`);\r\n  };\r\n\r\n  const onChange = () => {};\r\n  return (\r\n    <>\r\n      <h1>Form AntDesign</h1>\r\n\r\n      <Row gutter={[12, 12]}>\r\n        <Col xs={24} sm={24} md={6}>\r\n          <Space direction=\"vertical\">\r\n            <DatePicker onChange={onChange} />\r\n            <DatePicker onChange={onChange} picker=\"week\" />\r\n            <DatePicker onChange={onChange} picker=\"month\" />\r\n            <DatePicker onChange={onChange} picker=\"quarter\" />\r\n            <DatePicker onChange={onChange} picker=\"year\" />\r\n          </Space>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={12}>\r\n          <Card\r\n            title=\"Default size card\"\r\n            extra={<a href=\"#\">More</a>}\r\n            style={{ width: \"100%\", background: \"#fae6ff\" }}\r\n            hoverable\r\n          >\r\n            <Space>\r\n              <Button type=\"primary\" onClick={handleShowModal}>\r\n                Show Modal\r\n              </Button>\r\n              <Button onClick={handleDisplayMessage}>Display Message</Button>\r\n              <Button type=\"dashed\">Dashed Button</Button>\r\n              <br />\r\n              <Button type=\"text\">Text Button</Button>\r\n              <Button type=\"link\">Link Button</Button>\r\n            </Space>\r\n          </Card>\r\n\r\n          <Modal\r\n            title=\"Basic Modal\"\r\n            visible={isModalVisible}\r\n            onOk={handleOk}\r\n            onCancel={handleCancel}\r\n          >\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n          </Modal>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={6}>\r\n          <Input placeholder=\"Basic usage\" />\r\n\r\n          <Select\r\n            defaultValue=\"lucy\"\r\n            style={{ width: 120 }}\r\n            onChange={handleChange}\r\n          >\r\n            <Option value=\"jack\">Jack</Option>\r\n            <Option value=\"lucy\">Lucy</Option>\r\n            <Option value=\"disabled\" disabled>\r\n              Disabled\r\n            </Option>\r\n            <Option value=\"Yiminghe\">yiminghe</Option>\r\n          </Select>\r\n          <Checkbox>Checkbox</Checkbox>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormAntDesign;\r\n","D:\\ReactTraining\\training1\\src\\components\\SampleForm1.jsx",["152","153"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Form,\r\n  Input,\r\n  DatePicker,\r\n  Button,\r\n  message,\r\n  Select,\r\n  AutoComplete,\r\n  Radio,\r\n  Upload,\r\n} from \"antd\";\r\n\r\nimport moment from \"moment\";\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nconst SampleForm1 = (props) => {\r\n  const [formPatientInformation] = Form.useForm();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [sex, setSex] = useState([]);\r\n  const [religion, setReligion] = useState([]);\r\n  const [isMiddleNameRequired, setIsMiddlenameRequired] = useState(false);\r\n  const handleSubmitForm = async (values) => {\r\n    setIsSubmitting(true);\r\n    message.success(\"Valid form to be submitted!\");\r\n    console.log(values);\r\n\r\n    setIsSubmitting(false);\r\n  };\r\n\r\n  const handleOnFinishFailed = (errorInfo) => {\r\n    console.log(errorInfo);\r\n    message.error(\"Please check required fields!\");\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 5,\r\n    },\r\n    wrapperCol: {\r\n      span: 19,\r\n    },\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 5,\r\n      span: 19,\r\n    },\r\n  };\r\n\r\n  const handleGetPatientInformation = () => {\r\n    //    function to get data from api\r\n\r\n    const data = {\r\n      LastName: \"Fabular\",\r\n      FirstName: \"Allan\",\r\n      MiddleName: \"Delola\",\r\n      DateOfBirth: \"12/12/1990\",\r\n      EmailAddress: \"allan@comlogik.com\",\r\n    };\r\n\r\n    formPatientInformation.setFieldsValue({\r\n      LastName: data.LastName,\r\n      FirstName: data.FirstName,\r\n      MiddleName: data.MiddleName,\r\n      DateOfBirth: moment(new Date(data.DateOfBirth), \"MM/DD/yyyy\"),\r\n      EmailAddress: data.EmailAddress,\r\n    });\r\n  };\r\n\r\n  const handleGetInitialValues = () => {\r\n    setSex([\r\n      {\r\n        value: \"M\",\r\n        description: \"Male\",\r\n      },\r\n      {\r\n        value: \"F\",\r\n        description: \"Female\",\r\n      },\r\n    ]);\r\n\r\n    setReligion([\r\n      {\r\n        value: \"Roman Catholic\",\r\n      },\r\n      {\r\n        value: \"Born Again Christian\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleChangeSex = (value) => {\r\n    console.log(value);\r\n    if (value === \"F\") {\r\n      setIsMiddlenameRequired(true);\r\n    } else {\r\n      setIsMiddlenameRequired(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleGetInitialValues();\r\n    handleGetPatientInformation();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row gutter={[12, 12]}>\r\n        <Col xs={24} sm={24} md={6}></Col>\r\n        <Col xs={24} sm={24} md={12}>\r\n          <Card\r\n            title=\"Patient Information\"\r\n            style={{ width: \"100%\", background: \"#fae6ff\" }}\r\n            hoverable\r\n          >\r\n            <Form\r\n              onFinish={handleSubmitForm}\r\n              onFinishFailed={handleOnFinishFailed}\r\n              form={formPatientInformation}\r\n              {...layout}\r\n            >\r\n              <Form.Item\r\n                label=\"Lastname\"\r\n                name=\"LastName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your lastname!\",\r\n                  },\r\n                  {\r\n                    max: 50,\r\n                    message: \"Lastname should be 50 char(s) only!\",\r\n                  },\r\n                  {\r\n                    min: 5,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Firstname\"\r\n                name=\"FirstName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your firstname!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Middlename\"\r\n                name=\"MiddleName\"\r\n                rules={[\r\n                  {\r\n                    required: isMiddleNameRequired,\r\n                  },\r\n                  {\r\n                    max: 50,\r\n                    message: \"Middlename must be 50 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Date of birth\"\r\n                name=\"DateOfBirth\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Date of birth is required!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <DatePicker\r\n                  format={\"MM/DD/yyyy\"}\r\n                  defaultValue={moment(new Date(), \"MM/DD/yyyy\")}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Sex\"\r\n                name=\"Sex\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Sex is required!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select allowClear onChange={handleChangeSex}>\r\n                  {sex.map((d) => (\r\n                    <Option key={d.value}>{d.description}</Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Religion\" name=\"Religion\">\r\n                <AutoComplete\r\n                  value=\"value\"\r\n                  options={religion}\r\n                  placeholder=\"Please select\"\r\n                  filterOption={(inputValue, option) =>\r\n                    option.value\r\n                      .toUpperCase()\r\n                      .indexOf(inputValue.toUpperCase()) !== -1\r\n                  }\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Blood type\" name=\"BloodType\">\r\n                <Radio.Group>\r\n                  <Radio value={\"A\"}>A</Radio>\r\n                  <Radio value={\"O\"}>O</Radio>\r\n                  <Radio value={\"O+\"}>O+</Radio>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Email Address\"\r\n                name=\"EmailAddress\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Email address is required!\",\r\n                  },\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"Invalid email address!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n              <Form.Item label=\"Remarks\" name=\"Remarks\">\r\n                <TextArea rows={4} />\r\n              </Form.Item>\r\n              <Form.Item {...tailLayout}>\r\n                <Button loading={isSubmitting} type=\"primary\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={6}></Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SampleForm1;\r\n","D:\\ReactTraining\\training1\\src\\components\\ItemProfile.jsx",["154"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Card,\r\n  Form,\r\n  Input,\r\n  AutoComplete,\r\n  Checkbox,\r\n  InputNumber,\r\n  Select,\r\n  Button,\r\n} from \"antd\";\r\nconst { Option } = Select;\r\nconst ItemProfile = () => {\r\n  const [formItemProfile] = Form.useForm();\r\n  const [dosageForm, setDosageForm] = useState([]);\r\n  const [isForSale, setIsForSale] = useState(false);\r\n  const [category, setCategory] = useState([]);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const layout = {\r\n    labelCol: {\r\n      span: 5,\r\n    },\r\n    wrapperCol: {\r\n      span: 19,\r\n    },\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 5,\r\n      span: 19,\r\n    },\r\n  };\r\n  const handleSubmitForm = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const handleOnFinishFailed = () => {};\r\n\r\n  const handleGetInitialValues = () => {\r\n    setDosageForm([\r\n      {\r\n        value: \"Tablet\",\r\n      },\r\n      {\r\n        value: \"Capsule\",\r\n      },\r\n      { value: \"Vial\" },\r\n    ]);\r\n\r\n    setCategory([\r\n      {\r\n        value: \"0001\",\r\n        description: \"Medicine\",\r\n      },\r\n      {\r\n        value: \"0002\",\r\n        description: \"Medical Supplies\",\r\n      },\r\n      { value: \"0003\", description: \"Janitorial Supplies\" },\r\n    ]);\r\n  };\r\n  const handleForSaleChange = (e) => {\r\n    setIsForSale(e.target.checked);\r\n\r\n    if (!e.target.checked) {\r\n      formItemProfile.setFieldsValue({\r\n        SellingPrice: undefined,\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    handleGetInitialValues();\r\n  }, []);\r\n  return (\r\n    <div style={{ marginTop: 10 }}>\r\n      <Row gutter={[12, 12]}>\r\n        <Col sm={24} md={6}></Col>\r\n        <Col sm={24} md={12}>\r\n          <Card\r\n            title=\"Item Profile\"\r\n            style={{ width: \"100%\", background: \"#fae6ff\" }}\r\n            hoverable\r\n          >\r\n            <Form\r\n              onFinish={handleSubmitForm}\r\n              onFinishFailed={handleOnFinishFailed}\r\n              form={formItemProfile}\r\n              {...layout}\r\n            >\r\n              <Form.Item\r\n                label=\"Item Code\"\r\n                name=\"ItemCode\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please encode item code!\",\r\n                  },\r\n                  {\r\n                    max: 10,\r\n                    message: \"Lastname should be 10 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Brandname\"\r\n                name=\"BrandName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input brandname!\",\r\n                  },\r\n                  {\r\n                    max: 100,\r\n                    message: \"Brandname should be 100 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Generic Name\"\r\n                name=\"GenericName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input generic name!\",\r\n                  },\r\n                  {\r\n                    max: 100,\r\n                    message: \"Generic name should be 100 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Dosage Form\"\r\n                name=\"DosageForm\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input dosage form!\",\r\n                  },\r\n                  {\r\n                    max: 100,\r\n                    message: \"Dosage should be 100 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <AutoComplete\r\n                  value=\"value\"\r\n                  options={dosageForm}\r\n                  placeholder=\"Please select\"\r\n                  filterOption={(inputValue, option) =>\r\n                    option.value\r\n                      .toUpperCase()\r\n                      .indexOf(inputValue.toUpperCase()) !== -1\r\n                  }\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Check if item is for sale\" name=\"ForSale\">\r\n                <Checkbox onChange={handleForSaleChange} />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Selling Price\"\r\n                name=\"SellingPrice\"\r\n                rules={[\r\n                  {\r\n                    required: isForSale,\r\n                    message: \"Please encode selling price!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <InputNumber />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Category\"\r\n                name=\"Category\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select category!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select allowClear>\r\n                  {category.map((d) => (\r\n                    <Option key={d.value}>{d.description}</Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n              <Form.Item {...tailLayout}>\r\n                <Button loading={isSubmitting} type=\"primary\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n        <Col sm={24} md={6}></Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemProfile;\r\n","D:\\ReactTraining\\training1\\src\\components\\ChargeForm.jsx",["155"],"D:\\ReactTraining\\training1\\src\\components\\GeneralJournal.jsx",["156","157","158","159"],"E:\\My Projects\\traning\\training1\\src\\index.js",[],["160","161"],"E:\\My Projects\\traning\\training1\\src\\reportWebVitals.js",[],"E:\\My Projects\\traning\\training1\\src\\App.js",[],"E:\\My Projects\\traning\\training1\\src\\components\\Routes.jsx",[],"E:\\My Projects\\traning\\training1\\src\\components\\Form2.jsx",[],"E:\\My Projects\\traning\\training1\\src\\components\\Home.jsx",[],"E:\\My Projects\\traning\\training1\\src\\components\\Form1.jsx",["162"],"E:\\My Projects\\traning\\training1\\src\\components\\Form3.jsx",[],"E:\\My Projects\\traning\\training1\\src\\components\\SampleForm1.jsx",["163","164"],"E:\\My Projects\\traning\\training1\\src\\components\\FormAntDesign.jsx",["165"],"E:\\My Projects\\traning\\training1\\src\\components\\GeneralJournal.jsx",["166","167","168","169"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  Tooltip,\r\n  Button,\r\n  Modal,\r\n  InputNumber,\r\n  Checkbox,\r\n  message,\r\n  Space,\r\n  Popconfirm,\r\n} from \"antd\";\r\nimport { CheckOutlined, DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\r\nconst GeneralJournal = () => {\r\n  const [listOfCoa, setListOfCoa] = useState([]);\r\n  const [addedEntries, setAddedEntries] = useState([]);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [accountCode, setAccountCode] = useState(\"\");\r\n  const [accountName, setAccountName] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n  const [creditEntry, setCreditEntry] = useState(false);\r\n  const [totalDebit, setTotalDebit] = useState(0);\r\n  const [totalCredit, setTotalCredit] = useState(0);\r\n  const [editAccountCode, setEditAccountCode] = useState(\"\");\r\n  const tableCol1 = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"operation\",\r\n      width: 75,\r\n      render: (text, record) =>\r\n        listOfCoa.length >= 1 ? (\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => handleSelect(record.AccountCode)}\r\n          >\r\n            Select\r\n          </Button>\r\n        ) : null,\r\n    },\r\n    {\r\n      title: \"Account Code\",\r\n      dataIndex: \"AccountCode\",\r\n      key: \"AccountCode\",\r\n    },\r\n    {\r\n      title: \"Account name\",\r\n      dataIndex: \"AccountName\",\r\n      key: \"AccountName\",\r\n    },\r\n  ];\r\n\r\n  const tableCol2 = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"operation\",\r\n      width: 75,\r\n      render: (text, record) =>\r\n        addedEntries.length >= 1 ? (\r\n          <div>\r\n            <Space>\r\n              <Button\r\n                type=\"primary\"\r\n                onClick={() => handleEdit(record.AccountCode)}\r\n              >\r\n                Edit\r\n              </Button>\r\n\r\n              <Popconfirm\r\n                title=\"Remove this item?\"\r\n                onConfirm={handleRemove}\r\n                onCancel={() => setEditAccountCode(\"\")}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n              >\r\n                <Button\r\n                  danger\r\n                  type=\"primary\"\r\n                  onClick={() => setEditAccountCode(record.AccountCode)}\r\n                >\r\n                  Remove\r\n                </Button>\r\n              </Popconfirm>\r\n            </Space>\r\n          </div>\r\n        ) : null,\r\n    },\r\n    {\r\n      title: \"Account Code\",\r\n      dataIndex: \"AccountCode\",\r\n      key: \"AccountCode\",\r\n    },\r\n    {\r\n      title: \"Account name\",\r\n      dataIndex: \"AccountName\",\r\n      key: \"AccountName\",\r\n    },\r\n    {\r\n      title: \"Debit\",\r\n      dataIndex: \"Debit\",\r\n      key: \"Debit\",\r\n    },\r\n    {\r\n      title: \"Credit\",\r\n      dataIndex: \"Credit\",\r\n      key: \"Credit\",\r\n    },\r\n  ];\r\n\r\n  const handleRemove = () => {\r\n    const newArray = addedEntries.filter(\r\n      (f) => f.AccountCode !== editAccountCode\r\n    );\r\n    setAddedEntries(newArray);\r\n    setEditAccountCode(\"\");\r\n  };\r\n  const handleEdit = (e) => {\r\n    setEditAccountCode(e);\r\n    const x = addedEntries.filter((f) => f.AccountCode === e);\r\n    setAccountCode(x[0].AccountCode);\r\n    setAccountName(x[0].AccountName);\r\n    setAmount(x[0].Debit + x[0].Credit);\r\n    if (x[0].Credit > 0) {\r\n      setCreditEntry(true);\r\n    } else {\r\n      setCreditEntry(false);\r\n    }\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleSelect = (e) => {\r\n    const exist = addedEntries.filter((f) => f.AccountCode === e);\r\n\r\n    if (exist.length > 0) {\r\n      message.error(\"Account already added!\");\r\n      return;\r\n    }\r\n\r\n    const x = listOfCoa.filter((f) => f.AccountCode === e);\r\n\r\n    setAccountCode(x[0].AccountCode);\r\n    setAccountName(x[0].AccountName);\r\n    setAmount(0);\r\n    setCreditEntry(false);\r\n    setShowModal(true);\r\n  };\r\n  const handleAddEntry = () => {\r\n    if (amount === null) {\r\n      message.error(\"Amount is required!\");\r\n      return;\r\n    } else if (amount <= 0) {\r\n      message.error(\"Amount must be greater than 0!\");\r\n      return;\r\n    }\r\n\r\n    if (editAccountCode === \"\") {\r\n      const rowToBeAdded = {\r\n        AccountCode: accountCode,\r\n        AccountName: accountName,\r\n        Debit: creditEntry ? 0 : amount,\r\n        Credit: creditEntry ? amount : 0,\r\n      };\r\n\r\n      setAddedEntries([...addedEntries, rowToBeAdded]);\r\n    } else {\r\n      const f = (obj) => obj.AccountCode === editAccountCode;\r\n      const index = addedEntries.findIndex(f);\r\n      addedEntries[index].Debit = creditEntry ? 0 : amount;\r\n      addedEntries[index].Credit = creditEntry ? amount : 0;\r\n    }\r\n    computeTotals();\r\n    setEditAccountCode(\"\");\r\n    setShowModal(false);\r\n  };\r\n  const handleCancelAddEntry = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const handleChangeCreditEntry = (e) => {\r\n    setCreditEntry(e.target.checked);\r\n  };\r\n  useEffect(() => {\r\n    setListOfCoa([\r\n      {\r\n        AccountCode: \"1001\",\r\n        AccountName: \"Cash on hand\",\r\n      },\r\n      {\r\n        AccountCode: \"1002\",\r\n        AccountName: \"A/R Patients\",\r\n      },\r\n      {\r\n        AccountCode: \"4001\",\r\n        AccountName: \"Medicine Income\",\r\n      },\r\n      {\r\n        AccountCode: \"5001\",\r\n        AccountName: \"Salaries and Wages\",\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    computeTotals();\r\n  }, [addedEntries]);\r\n\r\n  const computeTotals = () => {\r\n    var totaldebit = 0;\r\n    var totalcredit = 0;\r\n    addedEntries.forEach((obj) => {\r\n      totaldebit += obj.Debit;\r\n      totalcredit += obj.Credit;\r\n    });\r\n\r\n    setTotalDebit(totaldebit.toFixed(2));\r\n    setTotalCredit(totalcredit.toFixed(2));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"font-semibold text-2xl text-center\">General Journal</div>\r\n      <div className=\"grid md:grid-cols-2 gap-5 mt-5\">\r\n        <div className=\"border shadow-md p-2\">\r\n          <div className=\"text-center  font-semibold\">Chart of accounts</div>\r\n\r\n          <div>\r\n            <Table\r\n              columns={tableCol1}\r\n              dataSource={listOfCoa}\r\n              pagination={false}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"border shadow-md p-2\">\r\n          <div className=\"text-center  font-semibold\">Journal Entries</div>\r\n          <div>\r\n            <Table\r\n              columns={tableCol2}\r\n              dataSource={addedEntries}\r\n              pagination={false}\r\n            />\r\n          </div>\r\n          <div className=\"grid grid-cols-3\">\r\n            <div className=\"font-semibold\">Totals </div>\r\n            <div className=\"font-semibold\">Debit:{totalDebit}</div>\r\n            <div className=\"font-semibold\">Credit:{totalCredit}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Modal\r\n        title=\"Add Charge\"\r\n        visible={showModal}\r\n        onOk={handleAddEntry}\r\n        onCancel={handleCancelAddEntry}\r\n      >\r\n        <div className=\"grid grid-cols-2 gap-2\">\r\n          <div className=\"font-semibold\">Account Code</div>\r\n          <div className=\"font-semibold\">{accountCode}</div>\r\n          <div className=\"font-semibold\">Account Name</div>\r\n          <div className=\"font-semibold\">{accountName}</div>\r\n\r\n          <div className=\"font-semibold\">Amount</div>\r\n          <div className=\"font-semibold\">\r\n            <InputNumber\r\n              value={amount}\r\n              onChange={(value) => setAmount(value)}\r\n            />\r\n          </div>\r\n          <div className=\"font-semibold\">Check if credit entry?</div>\r\n          <div className=\"font-semibold\">\r\n            <Checkbox\r\n              checked={creditEntry}\r\n              onChange={handleChangeCreditEntry}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GeneralJournal;\r\n","E:\\My Projects\\traning\\training1\\src\\components\\ChargeForm.jsx",["170"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  Tooltip,\r\n  Button,\r\n  Modal,\r\n  InputNumber,\r\n  message,\r\n  Popconfirm,\r\n  Input,\r\n} from \"antd\";\r\nimport { CheckOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nconst ChargeForm = () => {\r\n  const [listOfCharges, setListOfCharges] = useState([]);\r\n  const [filteredCharges, setFilteredCharges] = useState([]);\r\n  const [addedCharges, setAddedCharges] = useState([]);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [price, setPrice] = useState(0);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [qty, setQty] = useState(1);\r\n  const [itemIdSelected, setItemIdSelected] = useState(\"\");\r\n  const [itemIdToBeRemoved, setItemIdToBeRemoved] = useState(\"\");\r\n  const [totalAmount, setTotalAmount] = useState(0);\r\n  const [searchStr, setSearchStr] = useState(\"\");\r\n\r\n  const tableCol1 = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"operation\",\r\n      width: 75,\r\n      render: (text, record) =>\r\n        listOfCharges.length >= 1 ? (\r\n          <Tooltip title=\"Select\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"circle\"\r\n              icon={<CheckOutlined />}\r\n              onClick={() => handleSelect(record.ItemId)}\r\n            />\r\n          </Tooltip>\r\n        ) : null,\r\n    },\r\n    {\r\n      title: \"Description\",\r\n      dataIndex: \"Description\",\r\n      key: \"Description\",\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      dataIndex: \"Price\",\r\n      key: \"Price\",\r\n    },\r\n  ];\r\n\r\n  const tableCol2 = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"operation\",\r\n      width: 75,\r\n      render: (text, record) =>\r\n        addedCharges.length >= 1 ? (\r\n          <Popconfirm\r\n            title=\"Remove this item?\"\r\n            onConfirm={handleRemoveItem}\r\n            onCancel={handleCancelRemoveItem}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n          >\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"circle\"\r\n              icon={<DeleteOutlined />}\r\n              onClick={() => setItemIdToBeRemoved(record.ItemId)}\r\n            />\r\n          </Popconfirm>\r\n        ) : null,\r\n    },\r\n    {\r\n      title: \"Description\",\r\n      dataIndex: \"Description\",\r\n      key: \"Description\",\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      dataIndex: \"Price\",\r\n      key: \"Price\",\r\n    },\r\n    {\r\n      title: \"Quantity\",\r\n      dataIndex: \"Quantity\",\r\n      key: \"Quantity\",\r\n    },\r\n    {\r\n      title: \"Amount\",\r\n      dataIndex: \"Amount\",\r\n      key: \"Amount\",\r\n    },\r\n  ];\r\n  const handleRemoveItem = () => {\r\n    const newArray = addedCharges.filter((f) => f.ItemId !== itemIdToBeRemoved);\r\n    setAddedCharges(newArray);\r\n  };\r\n  const handleCancelRemoveItem = () => {};\r\n  const handleSelect = (itemId) => {\r\n    const exist = addedCharges.filter((f) => f.ItemId === itemId);\r\n\r\n    if (exist.length > 0) {\r\n      message.error(\"Procedure already added!\");\r\n      return;\r\n    }\r\n\r\n    setItemIdSelected(itemId);\r\n    const item = listOfCharges.filter((f) => f.ItemId === itemId);\r\n    setDescription(item[0].Description);\r\n    setQty(1);\r\n    setPrice(item[0].Price);\r\n    setShowModal(true);\r\n  };\r\n  useEffect(() => {\r\n    setListOfCharges([\r\n      {\r\n        ItemId: \"0001\",\r\n        Description: \"CBC\",\r\n        Price: 100,\r\n      },\r\n      {\r\n        ItemId: \"0002\",\r\n        Description: \"Fecalysis\",\r\n        Price: 120,\r\n      },\r\n      {\r\n        ItemId: \"0003\",\r\n        Description: \"Albumin\",\r\n        Price: 200,\r\n      },\r\n      {\r\n        ItemId: \"0004\",\r\n        Description: \"Urinalysis\",\r\n        Price: 50,\r\n      },\r\n    ]);\r\n    setFilteredCharges(listOfCharges);\r\n  }, []);\r\n  const handleAddCharge = () => {\r\n    //Test if qty and selling price are valid\r\n\r\n    if (price === null) {\r\n      message.error(\"Selling price is required!\");\r\n      return;\r\n    } else if (price <= 0) {\r\n      message.error(\"Selling price is required!\");\r\n      return;\r\n    } else if (qty === null) {\r\n      message.error(\"Quantity is required!\");\r\n      return;\r\n    } else if (qty <= 0) {\r\n      message.error(\"Quantity is required!\");\r\n      return;\r\n    }\r\n\r\n    const addedItem = {\r\n      ItemId: itemIdSelected,\r\n      Description: description,\r\n      Price: price,\r\n      Quantity: qty,\r\n      Amount: price * qty,\r\n    };\r\n\r\n    setAddedCharges([...addedCharges, addedItem]);\r\n    setShowModal(false);\r\n  };\r\n  const handleCancelAddCharge = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    var sum = 0;\r\n    addedCharges.forEach((obj) => {\r\n      sum += obj.Amount;\r\n    });\r\n\r\n    setTotalAmount(sum.toFixed(2));\r\n  }, [addedCharges]);\r\n\r\n  const handleChangeSearchStr = (e) => {\r\n    setSearchStr(e.target.value);\r\n\r\n    if (searchStr === \"\") {\r\n      setFilteredCharges(listOfCharges);\r\n      return;\r\n    }\r\n\r\n    const filteredData = listOfCharges.filter((item) => {\r\n      return Object.keys(item).some((key) =>\r\n        item[key]\r\n          .toString()\r\n          .toLowerCase()\r\n          .includes(e.target.value.toLowerCase().trim())\r\n      );\r\n    });\r\n    setFilteredCharges(filteredData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"font-semibold text-2xl text-center\">Charge Form</div>\r\n      <div className=\"grid md:grid-cols-2 gap-5 mt-5\">\r\n        <div className=\"border shadow-md p-2\">\r\n          <div className=\"text-center  font-semibold\">List of Charges</div>\r\n          <div>\r\n            <Input\r\n              value={searchStr}\r\n              onChange={(value) => handleChangeSearchStr(value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Table\r\n              columns={tableCol1}\r\n              dataSource={filteredCharges}\r\n              pagination={false}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"border shadow-md p-2\">\r\n          <div className=\"text-center  font-semibold\">Added Charges</div>\r\n\r\n          <Table\r\n            columns={tableCol2}\r\n            dataSource={addedCharges}\r\n            pagination={false}\r\n          />\r\n          <div className=\"font-bold\">Total Amount:{totalAmount}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <Modal\r\n        title=\"Add Charge\"\r\n        visible={showModal}\r\n        onOk={handleAddCharge}\r\n        onCancel={handleCancelAddCharge}\r\n      >\r\n        <div className=\"grid grid-cols-2 gap-2\">\r\n          <div className=\"font-semibold\">Description</div>\r\n          <div className=\"font-semibold\">{description}</div>\r\n          <div className=\"font-semibold\">Selling Price</div>\r\n          <div className=\"font-semibold\">\r\n            <InputNumber value={price} onChange={(value) => setPrice(value)} />\r\n          </div>\r\n          <div className=\"font-semibold\">Quantity</div>\r\n          <div className=\"font-semibold\">\r\n            <InputNumber value={qty} onChange={(value) => setQty(value)} />\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChargeForm;\r\n","E:\\My Projects\\traning\\training1\\src\\components\\ItemProfile.jsx",["171"],"E:\\My Projects\\traning\\training1\\src\\components\\FormRedux.jsx",[],"E:\\My Projects\\traning\\training1\\src\\reducers\\index.js",[],"E:\\My Projects\\traning\\training1\\src\\reducers\\count.js",[],"E:\\My Projects\\traning\\training1\\src\\actions\\index.js",[],"E:\\My Projects\\traning\\training1\\src\\reducers\\user.js",[],"E:\\My Projects\\traning\\training1\\src\\components\\UserInformation.jsx",["172"],"E:\\My Projects\\traning\\training1\\src\\components\\Users.jsx",[],{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":5,"column":21,"nodeType":"179","messageId":"180","endLine":5,"endColumn":33},{"ruleId":"181","severity":1,"message":"182","line":58,"column":20,"nodeType":"183","endLine":58,"endColumn":32},{"ruleId":"177","severity":1,"message":"184","line":14,"column":3,"nodeType":"179","messageId":"180","endLine":14,"endColumn":9},{"ruleId":"185","severity":1,"message":"186","line":108,"column":6,"nodeType":"187","endLine":108,"endColumn":8,"suggestions":"188"},{"ruleId":"177","severity":1,"message":"189","line":20,"column":24,"nodeType":"179","messageId":"180","endLine":20,"endColumn":39},{"ruleId":"185","severity":1,"message":"190","line":143,"column":6,"nodeType":"187","endLine":143,"endColumn":8,"suggestions":"191"},{"ruleId":"177","severity":1,"message":"192","line":5,"column":3,"nodeType":"179","messageId":"180","endLine":5,"endColumn":10},{"ruleId":"177","severity":1,"message":"193","line":14,"column":10,"nodeType":"179","messageId":"180","endLine":14,"endColumn":23},{"ruleId":"177","severity":1,"message":"194","line":14,"column":25,"nodeType":"179","messageId":"180","endLine":14,"endColumn":39},{"ruleId":"177","severity":1,"message":"195","line":14,"column":41,"nodeType":"179","messageId":"180","endLine":14,"endColumn":53},{"ruleId":"173","replacedBy":"196"},{"ruleId":"175","replacedBy":"197"},{"ruleId":"177","severity":1,"message":"178","line":5,"column":21,"nodeType":"179","messageId":"180","endLine":5,"endColumn":33},{"ruleId":"177","severity":1,"message":"184","line":14,"column":3,"nodeType":"179","messageId":"180","endLine":14,"endColumn":9},{"ruleId":"185","severity":1,"message":"186","line":108,"column":6,"nodeType":"187","endLine":108,"endColumn":8,"suggestions":"198"},{"ruleId":"181","severity":1,"message":"182","line":58,"column":20,"nodeType":"183","endLine":58,"endColumn":32},{"ruleId":"177","severity":1,"message":"192","line":5,"column":3,"nodeType":"179","messageId":"180","endLine":5,"endColumn":10},{"ruleId":"177","severity":1,"message":"193","line":14,"column":10,"nodeType":"179","messageId":"180","endLine":14,"endColumn":23},{"ruleId":"177","severity":1,"message":"194","line":14,"column":25,"nodeType":"179","messageId":"180","endLine":14,"endColumn":39},{"ruleId":"177","severity":1,"message":"195","line":14,"column":41,"nodeType":"179","messageId":"180","endLine":14,"endColumn":53},{"ruleId":"185","severity":1,"message":"190","line":143,"column":6,"nodeType":"187","endLine":143,"endColumn":8,"suggestions":"199"},{"ruleId":"177","severity":1,"message":"189","line":20,"column":24,"nodeType":"179","messageId":"180","endLine":20,"endColumn":39},{"ruleId":"177","severity":1,"message":"189","line":6,"column":24,"nodeType":"179","messageId":"180","endLine":6,"endColumn":39},"no-native-reassign",["200"],"no-negated-in-lhs",["201"],"no-unused-vars","'setFirstName' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Upload' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleGetPatientInformation'. Either include it or remove the dependency array.","ArrayExpression",["202"],"'setIsSubmitting' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'listOfCharges'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredCharges' needs the current value of 'listOfCharges'.",["203"],"'Tooltip' is defined but never used.","'CheckOutlined' is defined but never used.","'DeleteOutlined' is defined but never used.","'EditOutlined' is defined but never used.",["200"],["201"],["204"],["205"],"no-global-assign","no-unsafe-negation",{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"206","fix":"210"},{"desc":"208","fix":"211"},"Update the dependencies array to be: [handleGetPatientInformation]",{"range":"212","text":"213"},"Update the dependencies array to be: [listOfCharges]",{"range":"214","text":"215"},{"range":"216","text":"213"},{"range":"217","text":"215"},[2349,2351],"[handleGetPatientInformation]",[3667,3669],"[listOfCharges]",[2349,2351],[3667,3669]]