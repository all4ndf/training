[{"D:\\ReactTraining\\training1\\src\\index.js":"1","D:\\ReactTraining\\training1\\src\\App.js":"2","D:\\ReactTraining\\training1\\src\\reportWebVitals.js":"3","D:\\ReactTraining\\training1\\src\\Test.jsx":"4","D:\\ReactTraining\\training1\\src\\components\\Form1.jsx":"5","D:\\ReactTraining\\training1\\src\\components\\Form2.jsx":"6","D:\\ReactTraining\\training1\\src\\components\\Routes.jsx":"7","D:\\ReactTraining\\training1\\src\\components\\Home.jsx":"8","D:\\ReactTraining\\training1\\src\\components\\Form3.jsx":"9","D:\\ReactTraining\\training1\\src\\components\\FormAntDesign.jsx":"10"},{"size":614,"mtime":1610948274759,"results":"11","hashOfConfig":"12"},{"size":918,"mtime":1610948269579,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":275,"mtime":1610523189960,"results":"15","hashOfConfig":"16"},{"size":3666,"mtime":1610701710523,"results":"17","hashOfConfig":"12"},{"size":1725,"mtime":1610695663218,"results":"18","hashOfConfig":"12"},{"size":1010,"mtime":1610948234128,"results":"19","hashOfConfig":"12"},{"size":162,"mtime":1610604407233,"results":"20","hashOfConfig":"12"},{"size":1949,"mtime":1610945958109,"results":"21","hashOfConfig":"12"},{"size":2885,"mtime":1610950116870,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mxsbu4",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11u6n75",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\ReactTraining\\training1\\src\\index.js",[],"D:\\ReactTraining\\training1\\src\\App.js",[],"D:\\ReactTraining\\training1\\src\\reportWebVitals.js",[],["45","46"],"D:\\ReactTraining\\training1\\src\\Test.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Form1.jsx",["47"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nconst Form1 = (props) => {\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [qty, setQty] = useState(0);\r\n  const [unitPrice, setUnitPrice] = useState(0);\r\n  const [amount, setAmount] = useState(0);\r\n  const [patientInformation, setPatientInformation] = useState({});\r\n  const [patients, setPatients] = useState([]);\r\n  const [patientNo, setPatientNo] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    handleGetPatientInformation();\r\n    console.log(props);\r\n\r\n    setPatientNo(props.location.state.patientNo);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleComputeAmount();\r\n  }, [qty, unitPrice]);\r\n\r\n  const handleComputeAmount = () => {\r\n    let q = isNaN(qty) ? 0 : qty;\r\n    let p = isNaN(unitPrice) ? 0 : unitPrice;\r\n\r\n    setAmount(q * p);\r\n  };\r\n  const handleGetPatientInformation = () => {\r\n    console.log(\"Handle Patient Information\");\r\n    setPatientInformation({\r\n      lastName: \"Fabular\",\r\n      firstName: \"Allan\",\r\n      middleName: \"Delola\",\r\n    });\r\n\r\n    setPatients([\r\n      {\r\n        lastName: \"Fabular\",\r\n        firstName: \"Allan\",\r\n        middleName: \"Delola\",\r\n      },\r\n      {\r\n        lastName: \"Dela Cruz\",\r\n        firstName: \"Joseph\",\r\n        middleName: \"Ocampo\",\r\n      },\r\n      {\r\n        lastName: \"Dela Cruz\",\r\n        firstName: \"Joseph\",\r\n        middleName: \"Ocampo\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleChangeLastname = (e) => {\r\n    console.log(e);\r\n    setLastName(e.target.value);\r\n  };\r\n\r\n  const handleForm2 = () => {\r\n    props.history.push({\r\n      pathname: \"/form2\",\r\n      state: {\r\n        listOfItems: [\r\n          {\r\n            itemCode: \"1\",\r\n            brandName: \"xxxxxxxxxxx\",\r\n          },\r\n          {\r\n            itemCode: \"2\",\r\n            brandName: \"rrrrrrrr\",\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  };\r\n  const handleSubmitForm = (e) => {\r\n    e.preventDefault();\r\n    console.log(e);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <h1>Form 1</h1>\r\n      <button onClick={() => handleForm2()}>Form 2</button>\r\n      <div>\r\n        {firstName} {lastName}\r\n      </div>\r\n      <div>\r\n        {qty} {unitPrice}\r\n      </div>\r\n      <div>{amount}</div>\r\n      <div>{patientInformation.lastName}</div>\r\n\r\n      <div>\r\n        {patients.map((object, index) => {\r\n          return (\r\n            <p key={object.lastName}>\r\n              {object.lastName} - {object.firstName}\r\n            </p>\r\n          );\r\n        })}\r\n      </div>\r\n      <div>{patientNo}</div>\r\n\r\n      <form onSubmit={handleSubmitForm}>\r\n        <div>\r\n          <label>Lastname:</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"lastName\"\r\n            onChange={(e) => handleChangeLastname(e)}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Firstname:</label>\r\n          <input className=\"input\" type=\"text\" name=\"firstName\" />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Qty:</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"number\"\r\n            name=\"qty\"\r\n            onChange={(e) => setQty(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Unit price:</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"number\"\r\n            name=\"unitPrice\"\r\n            onChange={(e) => setUnitPrice(e.target.value)}\r\n          />\r\n        </div>\r\n        <button className=\"btn\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Form1;\r\n","D:\\ReactTraining\\training1\\src\\components\\Form2.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Routes.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Home.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Form3.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\FormAntDesign.jsx",["48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":5,"column":21,"nodeType":"55","messageId":"56","endLine":5,"endColumn":33},{"ruleId":"57","severity":1,"message":"58","line":58,"column":20,"nodeType":"59","endLine":58,"endColumn":32},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'setFirstName' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]