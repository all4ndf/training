[{"D:\\ReactTraining\\training1\\src\\index.js":"1","D:\\ReactTraining\\training1\\src\\App.js":"2","D:\\ReactTraining\\training1\\src\\reportWebVitals.js":"3","D:\\ReactTraining\\training1\\src\\Test.jsx":"4","D:\\ReactTraining\\training1\\src\\components\\Form1.jsx":"5","D:\\ReactTraining\\training1\\src\\components\\Form2.jsx":"6","D:\\ReactTraining\\training1\\src\\components\\Routes.jsx":"7","D:\\ReactTraining\\training1\\src\\components\\Home.jsx":"8","D:\\ReactTraining\\training1\\src\\components\\Form3.jsx":"9","D:\\ReactTraining\\training1\\src\\components\\FormAntDesign.jsx":"10","D:\\ReactTraining\\training1\\src\\components\\SampleForm1.jsx":"11","D:\\ReactTraining\\training1\\src\\components\\ItemProfile.jsx":"12","D:\\ReactTraining\\training1\\src\\components\\ChargeForm.jsx":"13","D:\\ReactTraining\\training1\\src\\components\\GeneralJournal.jsx":"14"},{"size":614,"mtime":1610948274759,"results":"15","hashOfConfig":"16"},{"size":1543,"mtime":1611815651197,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":275,"mtime":1610523189960,"results":"19","hashOfConfig":"20"},{"size":3666,"mtime":1610701710523,"results":"21","hashOfConfig":"16"},{"size":1725,"mtime":1610695663218,"results":"22","hashOfConfig":"16"},{"size":1824,"mtime":1611815620791,"results":"23","hashOfConfig":"16"},{"size":162,"mtime":1610604407233,"results":"24","hashOfConfig":"16"},{"size":1949,"mtime":1610945958109,"results":"25","hashOfConfig":"16"},{"size":2885,"mtime":1610950116870,"results":"26","hashOfConfig":"16"},{"size":7011,"mtime":1610959955063,"results":"27","hashOfConfig":"16"},{"size":5824,"mtime":1611209263879,"results":"28","hashOfConfig":"16"},{"size":6934,"mtime":1611823889638,"results":"29","hashOfConfig":"16"},{"size":7753,"mtime":1611827583112,"results":"30","hashOfConfig":"16"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1mxsbu4",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11u6n75",{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\ReactTraining\\training1\\src\\index.js",[],["64","65"],"D:\\ReactTraining\\training1\\src\\App.js",[],"D:\\ReactTraining\\training1\\src\\reportWebVitals.js",[],"D:\\ReactTraining\\training1\\src\\Test.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Form1.jsx",["66"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nconst Form1 = (props) => {\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [qty, setQty] = useState(0);\r\n  const [unitPrice, setUnitPrice] = useState(0);\r\n  const [amount, setAmount] = useState(0);\r\n  const [patientInformation, setPatientInformation] = useState({});\r\n  const [patients, setPatients] = useState([]);\r\n  const [patientNo, setPatientNo] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    handleGetPatientInformation();\r\n    console.log(props);\r\n\r\n    setPatientNo(props.location.state.patientNo);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleComputeAmount();\r\n  }, [qty, unitPrice]);\r\n\r\n  const handleComputeAmount = () => {\r\n    let q = isNaN(qty) ? 0 : qty;\r\n    let p = isNaN(unitPrice) ? 0 : unitPrice;\r\n\r\n    setAmount(q * p);\r\n  };\r\n  const handleGetPatientInformation = () => {\r\n    console.log(\"Handle Patient Information\");\r\n    setPatientInformation({\r\n      lastName: \"Fabular\",\r\n      firstName: \"Allan\",\r\n      middleName: \"Delola\",\r\n    });\r\n\r\n    setPatients([\r\n      {\r\n        lastName: \"Fabular\",\r\n        firstName: \"Allan\",\r\n        middleName: \"Delola\",\r\n      },\r\n      {\r\n        lastName: \"Dela Cruz\",\r\n        firstName: \"Joseph\",\r\n        middleName: \"Ocampo\",\r\n      },\r\n      {\r\n        lastName: \"Dela Cruz\",\r\n        firstName: \"Joseph\",\r\n        middleName: \"Ocampo\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleChangeLastname = (e) => {\r\n    console.log(e);\r\n    setLastName(e.target.value);\r\n  };\r\n\r\n  const handleForm2 = () => {\r\n    props.history.push({\r\n      pathname: \"/form2\",\r\n      state: {\r\n        listOfItems: [\r\n          {\r\n            itemCode: \"1\",\r\n            brandName: \"xxxxxxxxxxx\",\r\n          },\r\n          {\r\n            itemCode: \"2\",\r\n            brandName: \"rrrrrrrr\",\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  };\r\n  const handleSubmitForm = (e) => {\r\n    e.preventDefault();\r\n    console.log(e);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <h1>Form 1</h1>\r\n      <button onClick={() => handleForm2()}>Form 2</button>\r\n      <div>\r\n        {firstName} {lastName}\r\n      </div>\r\n      <div>\r\n        {qty} {unitPrice}\r\n      </div>\r\n      <div>{amount}</div>\r\n      <div>{patientInformation.lastName}</div>\r\n\r\n      <div>\r\n        {patients.map((object, index) => {\r\n          return (\r\n            <p key={object.lastName}>\r\n              {object.lastName} - {object.firstName}\r\n            </p>\r\n          );\r\n        })}\r\n      </div>\r\n      <div>{patientNo}</div>\r\n\r\n      <form onSubmit={handleSubmitForm}>\r\n        <div>\r\n          <label>Lastname:</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"lastName\"\r\n            onChange={(e) => handleChangeLastname(e)}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Firstname:</label>\r\n          <input className=\"input\" type=\"text\" name=\"firstName\" />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Qty:</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"number\"\r\n            name=\"qty\"\r\n            onChange={(e) => setQty(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label>Unit price:</label>\r\n          <input\r\n            className=\"input\"\r\n            type=\"number\"\r\n            name=\"unitPrice\"\r\n            onChange={(e) => setUnitPrice(e.target.value)}\r\n          />\r\n        </div>\r\n        <button className=\"btn\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Form1;\r\n","D:\\ReactTraining\\training1\\src\\components\\Form2.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Routes.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Home.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\Form3.jsx",[],"D:\\ReactTraining\\training1\\src\\components\\FormAntDesign.jsx",["67"],"import React, { useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Button,\r\n  Space,\r\n  Modal,\r\n  message,\r\n  Input,\r\n  Select,\r\n  Checkbox,\r\n  DatePicker,\r\n} from \"antd\";\r\nconst { Option } = Select;\r\nconst FormAntDesign = () => {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const handleShowModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n    console.log(\"Ok\");\r\n  };\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    console.log(\"Cancel\");\r\n  };\r\n\r\n  const handleDisplayMessage = () => {\r\n    message.warning(\"Warning\");\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    console.log(`selected ${value}`);\r\n  };\r\n\r\n  const onChange = () => {};\r\n  return (\r\n    <>\r\n      <h1>Form AntDesign</h1>\r\n\r\n      <Row gutter={[12, 12]}>\r\n        <Col xs={24} sm={24} md={6}>\r\n          <Space direction=\"vertical\">\r\n            <DatePicker onChange={onChange} />\r\n            <DatePicker onChange={onChange} picker=\"week\" />\r\n            <DatePicker onChange={onChange} picker=\"month\" />\r\n            <DatePicker onChange={onChange} picker=\"quarter\" />\r\n            <DatePicker onChange={onChange} picker=\"year\" />\r\n          </Space>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={12}>\r\n          <Card\r\n            title=\"Default size card\"\r\n            extra={<a href=\"#\">More</a>}\r\n            style={{ width: \"100%\", background: \"#fae6ff\" }}\r\n            hoverable\r\n          >\r\n            <Space>\r\n              <Button type=\"primary\" onClick={handleShowModal}>\r\n                Show Modal\r\n              </Button>\r\n              <Button onClick={handleDisplayMessage}>Display Message</Button>\r\n              <Button type=\"dashed\">Dashed Button</Button>\r\n              <br />\r\n              <Button type=\"text\">Text Button</Button>\r\n              <Button type=\"link\">Link Button</Button>\r\n            </Space>\r\n          </Card>\r\n\r\n          <Modal\r\n            title=\"Basic Modal\"\r\n            visible={isModalVisible}\r\n            onOk={handleOk}\r\n            onCancel={handleCancel}\r\n          >\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n          </Modal>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={6}>\r\n          <Input placeholder=\"Basic usage\" />\r\n\r\n          <Select\r\n            defaultValue=\"lucy\"\r\n            style={{ width: 120 }}\r\n            onChange={handleChange}\r\n          >\r\n            <Option value=\"jack\">Jack</Option>\r\n            <Option value=\"lucy\">Lucy</Option>\r\n            <Option value=\"disabled\" disabled>\r\n              Disabled\r\n            </Option>\r\n            <Option value=\"Yiminghe\">yiminghe</Option>\r\n          </Select>\r\n          <Checkbox>Checkbox</Checkbox>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormAntDesign;\r\n","D:\\ReactTraining\\training1\\src\\components\\SampleForm1.jsx",["68","69"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Form,\r\n  Input,\r\n  DatePicker,\r\n  Button,\r\n  message,\r\n  Select,\r\n  AutoComplete,\r\n  Radio,\r\n  Upload,\r\n} from \"antd\";\r\n\r\nimport moment from \"moment\";\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nconst SampleForm1 = (props) => {\r\n  const [formPatientInformation] = Form.useForm();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [sex, setSex] = useState([]);\r\n  const [religion, setReligion] = useState([]);\r\n  const [isMiddleNameRequired, setIsMiddlenameRequired] = useState(false);\r\n  const handleSubmitForm = async (values) => {\r\n    setIsSubmitting(true);\r\n    message.success(\"Valid form to be submitted!\");\r\n    console.log(values);\r\n\r\n    setIsSubmitting(false);\r\n  };\r\n\r\n  const handleOnFinishFailed = (errorInfo) => {\r\n    console.log(errorInfo);\r\n    message.error(\"Please check required fields!\");\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: {\r\n      span: 5,\r\n    },\r\n    wrapperCol: {\r\n      span: 19,\r\n    },\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 5,\r\n      span: 19,\r\n    },\r\n  };\r\n\r\n  const handleGetPatientInformation = () => {\r\n    //    function to get data from api\r\n\r\n    const data = {\r\n      LastName: \"Fabular\",\r\n      FirstName: \"Allan\",\r\n      MiddleName: \"Delola\",\r\n      DateOfBirth: \"12/12/1990\",\r\n      EmailAddress: \"allan@comlogik.com\",\r\n    };\r\n\r\n    formPatientInformation.setFieldsValue({\r\n      LastName: data.LastName,\r\n      FirstName: data.FirstName,\r\n      MiddleName: data.MiddleName,\r\n      DateOfBirth: moment(new Date(data.DateOfBirth), \"MM/DD/yyyy\"),\r\n      EmailAddress: data.EmailAddress,\r\n    });\r\n  };\r\n\r\n  const handleGetInitialValues = () => {\r\n    setSex([\r\n      {\r\n        value: \"M\",\r\n        description: \"Male\",\r\n      },\r\n      {\r\n        value: \"F\",\r\n        description: \"Female\",\r\n      },\r\n    ]);\r\n\r\n    setReligion([\r\n      {\r\n        value: \"Roman Catholic\",\r\n      },\r\n      {\r\n        value: \"Born Again Christian\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleChangeSex = (value) => {\r\n    console.log(value);\r\n    if (value === \"F\") {\r\n      setIsMiddlenameRequired(true);\r\n    } else {\r\n      setIsMiddlenameRequired(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleGetInitialValues();\r\n    handleGetPatientInformation();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row gutter={[12, 12]}>\r\n        <Col xs={24} sm={24} md={6}></Col>\r\n        <Col xs={24} sm={24} md={12}>\r\n          <Card\r\n            title=\"Patient Information\"\r\n            style={{ width: \"100%\", background: \"#fae6ff\" }}\r\n            hoverable\r\n          >\r\n            <Form\r\n              onFinish={handleSubmitForm}\r\n              onFinishFailed={handleOnFinishFailed}\r\n              form={formPatientInformation}\r\n              {...layout}\r\n            >\r\n              <Form.Item\r\n                label=\"Lastname\"\r\n                name=\"LastName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your lastname!\",\r\n                  },\r\n                  {\r\n                    max: 50,\r\n                    message: \"Lastname should be 50 char(s) only!\",\r\n                  },\r\n                  {\r\n                    min: 5,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Firstname\"\r\n                name=\"FirstName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your firstname!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Middlename\"\r\n                name=\"MiddleName\"\r\n                rules={[\r\n                  {\r\n                    required: isMiddleNameRequired,\r\n                  },\r\n                  {\r\n                    max: 50,\r\n                    message: \"Middlename must be 50 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Date of birth\"\r\n                name=\"DateOfBirth\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Date of birth is required!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <DatePicker\r\n                  format={\"MM/DD/yyyy\"}\r\n                  defaultValue={moment(new Date(), \"MM/DD/yyyy\")}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Sex\"\r\n                name=\"Sex\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Sex is required!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select allowClear onChange={handleChangeSex}>\r\n                  {sex.map((d) => (\r\n                    <Option key={d.value}>{d.description}</Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Religion\" name=\"Religion\">\r\n                <AutoComplete\r\n                  value=\"value\"\r\n                  options={religion}\r\n                  placeholder=\"Please select\"\r\n                  filterOption={(inputValue, option) =>\r\n                    option.value\r\n                      .toUpperCase()\r\n                      .indexOf(inputValue.toUpperCase()) !== -1\r\n                  }\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Blood type\" name=\"BloodType\">\r\n                <Radio.Group>\r\n                  <Radio value={\"A\"}>A</Radio>\r\n                  <Radio value={\"O\"}>O</Radio>\r\n                  <Radio value={\"O+\"}>O+</Radio>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Email Address\"\r\n                name=\"EmailAddress\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Email address is required!\",\r\n                  },\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"Invalid email address!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n              <Form.Item label=\"Remarks\" name=\"Remarks\">\r\n                <TextArea rows={4} />\r\n              </Form.Item>\r\n              <Form.Item {...tailLayout}>\r\n                <Button loading={isSubmitting} type=\"primary\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={6}></Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SampleForm1;\r\n","D:\\ReactTraining\\training1\\src\\components\\ItemProfile.jsx",["70"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Card,\r\n  Form,\r\n  Input,\r\n  AutoComplete,\r\n  Checkbox,\r\n  InputNumber,\r\n  Select,\r\n  Button,\r\n} from \"antd\";\r\nconst { Option } = Select;\r\nconst ItemProfile = () => {\r\n  const [formItemProfile] = Form.useForm();\r\n  const [dosageForm, setDosageForm] = useState([]);\r\n  const [isForSale, setIsForSale] = useState(false);\r\n  const [category, setCategory] = useState([]);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const layout = {\r\n    labelCol: {\r\n      span: 5,\r\n    },\r\n    wrapperCol: {\r\n      span: 19,\r\n    },\r\n  };\r\n  const tailLayout = {\r\n    wrapperCol: {\r\n      offset: 5,\r\n      span: 19,\r\n    },\r\n  };\r\n  const handleSubmitForm = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const handleOnFinishFailed = () => {};\r\n\r\n  const handleGetInitialValues = () => {\r\n    setDosageForm([\r\n      {\r\n        value: \"Tablet\",\r\n      },\r\n      {\r\n        value: \"Capsule\",\r\n      },\r\n      { value: \"Vial\" },\r\n    ]);\r\n\r\n    setCategory([\r\n      {\r\n        value: \"0001\",\r\n        description: \"Medicine\",\r\n      },\r\n      {\r\n        value: \"0002\",\r\n        description: \"Medical Supplies\",\r\n      },\r\n      { value: \"0003\", description: \"Janitorial Supplies\" },\r\n    ]);\r\n  };\r\n  const handleForSaleChange = (e) => {\r\n    setIsForSale(e.target.checked);\r\n\r\n    if (!e.target.checked) {\r\n      formItemProfile.setFieldsValue({\r\n        SellingPrice: undefined,\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    handleGetInitialValues();\r\n  }, []);\r\n  return (\r\n    <div style={{ marginTop: 10 }}>\r\n      <Row gutter={[12, 12]}>\r\n        <Col sm={24} md={6}></Col>\r\n        <Col sm={24} md={12}>\r\n          <Card\r\n            title=\"Item Profile\"\r\n            style={{ width: \"100%\", background: \"#fae6ff\" }}\r\n            hoverable\r\n          >\r\n            <Form\r\n              onFinish={handleSubmitForm}\r\n              onFinishFailed={handleOnFinishFailed}\r\n              form={formItemProfile}\r\n              {...layout}\r\n            >\r\n              <Form.Item\r\n                label=\"Item Code\"\r\n                name=\"ItemCode\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please encode item code!\",\r\n                  },\r\n                  {\r\n                    max: 10,\r\n                    message: \"Lastname should be 10 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Brandname\"\r\n                name=\"BrandName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input brandname!\",\r\n                  },\r\n                  {\r\n                    max: 100,\r\n                    message: \"Brandname should be 100 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Generic Name\"\r\n                name=\"GenericName\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input generic name!\",\r\n                  },\r\n                  {\r\n                    max: 100,\r\n                    message: \"Generic name should be 100 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Dosage Form\"\r\n                name=\"DosageForm\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input dosage form!\",\r\n                  },\r\n                  {\r\n                    max: 100,\r\n                    message: \"Dosage should be 100 char(s) only!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <AutoComplete\r\n                  value=\"value\"\r\n                  options={dosageForm}\r\n                  placeholder=\"Please select\"\r\n                  filterOption={(inputValue, option) =>\r\n                    option.value\r\n                      .toUpperCase()\r\n                      .indexOf(inputValue.toUpperCase()) !== -1\r\n                  }\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item label=\"Check if item is for sale\" name=\"ForSale\">\r\n                <Checkbox onChange={handleForSaleChange} />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Selling Price\"\r\n                name=\"SellingPrice\"\r\n                rules={[\r\n                  {\r\n                    required: isForSale,\r\n                    message: \"Please encode selling price!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <InputNumber />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Category\"\r\n                name=\"Category\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please select category!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select allowClear>\r\n                  {category.map((d) => (\r\n                    <Option key={d.value}>{d.description}</Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n              <Form.Item {...tailLayout}>\r\n                <Button loading={isSubmitting} type=\"primary\" htmlType=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Col>\r\n        <Col sm={24} md={6}></Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemProfile;\r\n","D:\\ReactTraining\\training1\\src\\components\\ChargeForm.jsx",["71"],"D:\\ReactTraining\\training1\\src\\components\\GeneralJournal.jsx",["72","73","74","75"],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":5,"column":21,"nodeType":"82","messageId":"83","endLine":5,"endColumn":33},{"ruleId":"84","severity":1,"message":"85","line":58,"column":20,"nodeType":"86","endLine":58,"endColumn":32},{"ruleId":"80","severity":1,"message":"87","line":14,"column":3,"nodeType":"82","messageId":"83","endLine":14,"endColumn":9},{"ruleId":"88","severity":1,"message":"89","line":108,"column":6,"nodeType":"90","endLine":108,"endColumn":8,"suggestions":"91"},{"ruleId":"80","severity":1,"message":"92","line":20,"column":24,"nodeType":"82","messageId":"83","endLine":20,"endColumn":39},{"ruleId":"88","severity":1,"message":"93","line":143,"column":6,"nodeType":"90","endLine":143,"endColumn":8,"suggestions":"94"},{"ruleId":"80","severity":1,"message":"95","line":5,"column":3,"nodeType":"82","messageId":"83","endLine":5,"endColumn":10},{"ruleId":"80","severity":1,"message":"96","line":14,"column":10,"nodeType":"82","messageId":"83","endLine":14,"endColumn":23},{"ruleId":"80","severity":1,"message":"97","line":14,"column":25,"nodeType":"82","messageId":"83","endLine":14,"endColumn":39},{"ruleId":"80","severity":1,"message":"98","line":14,"column":41,"nodeType":"82","messageId":"83","endLine":14,"endColumn":53},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'setFirstName' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Upload' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleGetPatientInformation'. Either include it or remove the dependency array.","ArrayExpression",["101"],"'setIsSubmitting' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'listOfCharges'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredCharges' needs the current value of 'listOfCharges'.",["102"],"'Tooltip' is defined but never used.","'CheckOutlined' is defined but never used.","'DeleteOutlined' is defined but never used.","'EditOutlined' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [handleGetPatientInformation]",{"range":"107","text":"108"},"Update the dependencies array to be: [listOfCharges]",{"range":"109","text":"110"},[2349,2351],"[handleGetPatientInformation]",[3667,3669],"[listOfCharges]"]